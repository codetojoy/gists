
project.ext.buildRequired = true 
def CACHE_FILE = new File("${projectDir}/git.commit.cache.txt")

def readCacheFile = { ->
    def result = "N/A"
    
    if (CACHE_FILE.exists()) {
        CACHE_FILE.getText().eachLine { line ->
            result = line
        }
    }

    return result
}

def writeCacheFile = { value ->
    CACHE_FILE.delete()
    
    CACHE_FILE.withWriter { writer ->
        writer.write(value)
        writer.write("\n")
    }
}


task checkCachedCommit() {
    doLast {
        def cmd = 'git log --pretty=format:"%h" -1'
        def args = ['sh', '-c', cmd]
        def process = new ProcessBuilder(args).directory(projectDir).start()

        def latestCommit = ""
        process.inputStream.eachLine { latestCommit = it }
        process.waitFor()

        def cachedCommit = readCacheFile()

        println "TRACER latestCommit: ${latestCommit} cachedCommit: ${cachedCommit}"

        if (cachedCommit == latestCommit) {
            println "TRACER skipping build !"
           project.ext.buildRequired = false
        } else {
            println "TRACER TODO: long build/publish here"
            println "TRACER writing new cache"
            writeCacheFile(latestCommit)
        }
    }
}

task buildAndPublish(dependsOn: ['checkCachedCommit']) {
    doLast {
        if (project.ext.buildRequired) {
            println "TRACER working ..."
            try { Thread.sleep(5000) } catch (Exception ex) {} 
            println "TRACER expensive build/publish here"
        } else {
            println "TRACER build skipped!"
        }
    }
}
