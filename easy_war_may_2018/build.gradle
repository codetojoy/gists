
apply plugin: 'war'
apply plugin: 'maven-publish'

apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/info.gradle"
apply from: "${rootDir}/gradle/git.tag.gradle"

repositories {
    mavenLocal() 

    maven {
        name "remoteArtifactory"
        url REPOSITORY_URL

        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }

    jcenter()
}

dependencies {}

war {
    baseName = 'easytoo_may'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

// ---------------------------------------------
// war file

group 'net.codetojoy'
def thisArtifactId = "easytoo_may"

// do during config phase:
ant.mkdir(dir: "${projectDir}/src/main/java/net/codetojoy/web")
def newBuildInfoFile = new File("${projectDir}/src/main/java/net/codetojoy/web/BuildInfo.java")
def templateBuildInfoFile = new File("${projectDir}/resources/TemplateBuildInfo.java")

// see ~/gradle/git.tag.gradle
def gitCommitInfo = project.ext.getGitCommitInfo()

newBuildInfoFile.withWriter { def writer ->
    templateBuildInfoFile.eachLine { def line ->
        def newLine = line.replace("__PACKAGE", "net.codetojoy.web")
                          .replace("__ARTIFACT", thisArtifactId)
                          .replace("__VERSION", project.version)
                          .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                          .replace("__GIT_COMMIT_INFO", gitCommitInfo.replaceAll(/"/, /'/))
        writer.write(newLine + "\n");
    }
}

task testGitCommitInfo() {
    doLast {
        println "TRACER gitCommitInfo: " + getGitCommitInfo()
    }
}

// ---------------------------------------------
// Git & Artifactory 

// auto-setup for ~/devops/utils/Mnemonic

task setupMnemonic(description: 'npm install for devops/utils/Mnemonic') {
    def mnemonicDir = "${projectDir}/devops/utils/Mnemonic"
    def nodeModules = new File("${mnemonicDir}/node_modules")
    if (! nodeModules.exists()) {
        project.ext.callBashScript "${mnemonicDir}/run_install.sh ${mnemonicDir}"
    }
}

task createTag(dependsOn: 'setupMnemonic') {
    doLast {
        def formatter = new java.text.SimpleDateFormat("yyyy-MMM-dd-HHmm")
        def timestamp = formatter.format(new Date()) 
        def mnemonics = project.ext.generateMnemonics()
        def tag = "easywar-${project.version}-${timestamp}-${mnemonics}"
        println "TRACER tag: ${tag}"

        def tagInfoJson = [:]
        tagInfoJson["name"] = mnemonics
        tagInfoJson["timestamp"] = timestamp
        tagInfoJson["version"] = version

        project.ext.ALL_ENVS.each { env ->
            // TODO: per ENV 
            def artifactoryURL = project.ext.getLatestURL()

            def buildInfoJSON = project.ext.getBuildInfoForArtifact(artifactoryURL)
            println "TRACER latest ${env} artifact commit hash: " + buildInfoJSON["commit"]
            println ""

            tagInfoJson["${env}.artifact.url"] = artifactoryURL

            // write to mapping file

            def mapFile = getTagArtifactMapForEnv(env)
            mapFile.append(/"${timestamp}","${tag}","${artifactoryURL}"/ + "\n")
        }

        def tagInfoFile = new File("${projectDir}/devops/tag.info.txt")
        if (tagInfoFile.exists()) { tagInfoFile.delete() }
        tagInfoFile.withWriter { f -> 
            def json = new groovy.json.JsonBuilder(tagInfoJson)
            f.write("\n" + json.toPrettyString() + "\n") 
        }

        def isDebug = false

        if (! isDebug) {
            // commit mapping file with presumptive tag

            project.ext.callBashScript "${projectDir}/devops/git.commit.tag.artifact.maps.sh ${projectDir}" 
            // perform tagging

            project.ext.callBashScript "${projectDir}/devops/create.tag.sh ${tag} ${tagInfoFile.absolutePath}"
        }
    }
}

task createTag2(dependsOn: 'setupMnemonic') {
    doLast {
        println "TRACER TARGET_GIT_HASH : " + project.TARGET_GIT_HASH
        println "TRACER TARGET_ENV : " + project.TARGET_ENV
        assert project.TARGET_GIT_HASH
        assert project.TARGET_ENV

        def formatter = new java.text.SimpleDateFormat("yyyy-MMM-dd-HHmm")
        def timestamp = formatter.format(new Date()) 
        def mnemonics = project.ext.generateMnemonics()
        def tag = "easywar-${project.version}-${timestamp}-${mnemonics}"
        println "TRACER tag: ${tag}"

        def tagInfoJson = [:]
        tagInfoJson["name"] = mnemonics
        tagInfoJson["timestamp"] = timestamp
        tagInfoJson["version"] = version

        project.ext.ALL_ENVS.each { env ->
            // def artifactoryURL = project.ext.getLatestURL()
            def artifactoryURL = getArtifactoryURLByGitHash(project.TARGET_ENV, project.TARGET_GIT_HASH)

            def buildInfoJSON = project.ext.getBuildInfoForArtifact(artifactoryURL)
            println "TRACER latest ${env} artifact commit hash: " + buildInfoJSON["commit"]
            println ""

            tagInfoJson["${env}.artifact.url"] = artifactoryURL

            // write to mapping file

            def mapFile = getTagArtifactMapForEnv(env)
            mapFile.append(/"${timestamp}","${tag}","${artifactoryURL}"/ + "\n")
        }

        def tagInfoFile = new File("${projectDir}/devops/tag.info.txt")
        if (tagInfoFile.exists()) { tagInfoFile.delete() }
        tagInfoFile.withWriter { f -> 
            def json = new groovy.json.JsonBuilder(tagInfoJson)
            f.write("\n" + json.toPrettyString() + "\n") 
        }

        def isDebug = false

        if (! isDebug) {
            // perform tagging

            project.ext.callBashScript "${projectDir}/devops/create.tag.sh ${tag} ${tagInfoFile.absolutePath}"
        }
    }
}

// ---------------------------------------------
// Deploying

task mockDeploy() {
    doLast {
        println "TRACER MOCK DEPLOY"
        println "TRACER MY_GIT_TAG : " + project.MY_GIT_TAG
        println "TRACER TARGET_ENV : " + project.ext.targetEnv
        def targetTag = project.MY_GIT_TAG

        def artifactoryURL = project.ext.getArtifactoryURLForTag(targetTag, project.ext.targetEnv) 

        println "TRACER tag: ${targetTag}"
        println "TRACER url: ${artifactoryURL}"
    }
}

task mockDeploy2() {
    doLast {
        println "TRACER NEW MOCK DEPLOY"
        println "TRACER MY_GIT_TAG : " + project.MY_GIT_TAG
        println "TRACER TARGET_ENV : " + project.ext.targetEnv
        def targetTag = project.MY_GIT_TAG

        def artifactoryURL = project.ext.getArtifactoryURLFromTag_V2(targetTag, project.ext.targetEnv) 
        println "TRACER mock 2 tag: ${targetTag}"
        println "TRACER mock 2 url: ${artifactoryURL}"
    }
}

task devTest() {
    doLast {
        println "TRACER devTest"

        println "TRACER TARGET_GIT_HASH : " + project.TARGET_GIT_HASH
        println "TRACER TARGET_ENV : " + project.TARGET_ENV
        
        def url = getArtifactoryURLByGitHash(project.TARGET_ENV, project.TARGET_GIT_HASH)
        println "TRACER url ${url}"
    }
}

// ---------------------------------------------
// Publishing

publishing {
    publications {
        codetojoyEasyWeb(MavenPublication) {
            from components.web
            artifactId thisArtifactId

            pom.withXml {
                def root = asNode()
                def props = root.appendNode('properties')
                props.appendNode('foo-buildTimeStamp', buildTimeStamp)
                props.appendNode('foo-gitCommitInfo', gitCommitInfo)
                props.appendNode('foo-gitTagInfo', 'tag-one')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url REPOSITORY_URL

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

