
apply plugin: 'war'
apply plugin: 'maven-publish'

apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/info.gradle"

repositories {
    mavenLocal() 

    maven {
        name "remoteArtifactory"
        url REPOSITORY_URL

        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }

    mavenCentral()
}

dependencies {
}

war {
    baseName = 'easytoo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

group 'net.codetojoy'
def thisArtifactId = "easytoo"

def getGitCommitInfo = { ->
    def result = new StringBuilder()
    def sysout = new StringBuilder()
    def syserr = new StringBuilder()
    def command = "git log -n 1"
    def process = command.execute()
    process.consumeProcessOutput(sysout, syserr)
    process.waitForOrKill(3000)
    if (syserr) { assert syserr.toString().isEmpty() }
    def lines = sysout.toString().split("\n")
    lines.each { line ->
        if ( (line ==~ /.*commit.*/) || (line ==~ /.*Author.*/) || (line ==~ /.*Date.*/) ) {
            result.append(line + "||")
        }
    }
    return result.toString()
}

// do during config phase:
ant.mkdir(dir: "${projectDir}/src/main/java/net/codetojoy/web")
def newBuildInfoFile = new File("${projectDir}/src/main/java/net/codetojoy/web/BuildInfo.java")
def templateBuildInfoFile = new File("${projectDir}/resources/TemplateBuildInfo.java")
def gitCommitInfo = getGitCommitInfo()

newBuildInfoFile.withWriter { def writer ->
    templateBuildInfoFile.eachLine { def line ->
        def newLine = line.replace("__PACKAGE", "net.codetojoy.web")
                          .replace("__ARTIFACT", thisArtifactId)
                          .replace("__VERSION", project.version)
                          .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                          .replace("__GIT_COMMIT_INFO", gitCommitInfo)
        writer.write(newLine + "\n");
    }
}

// ---------------------------------------------

publishing {
    publications {
        codetojoyEasyWeb(MavenPublication) {
            from components.web
            artifactId thisArtifactId

            pom.withXml {
                def root = asNode()
                root.appendNode('properties')
                    .appendNode('buildTimeStamp', buildTimeStamp)
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url REPOSITORY_URL

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

