
apply plugin: 'war'
apply plugin: 'maven-publish'

apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/info.gradle"

repositories {
    mavenLocal() 

    maven {
        name "remoteArtifactory"
        url REPOSITORY_URL

        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }

    jcenter()
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.apache.httpcomponents:httpclient:4.5.5'
    }
}


dependencies {
}

war {
    baseName = 'easytoo_may'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

// ---------------------------------------------
// war file

group 'net.codetojoy'
def thisArtifactId = "easytoo_may"

def extractOneIfMatching = { s, regex ->
    def result = null
    def matcher = (s =~ regex)
    if (matcher.matches()) {
        result = matcher[0][1]
    }
    return result
}

def getGitCommitInfo = { ->
    def infoMap = [:]

    def sysout = new StringBuilder()
    def syserr = new StringBuilder()
    def command = "git log -n 1"
    def process = command.execute()
    process.consumeProcessOutput(sysout, syserr)
    process.waitForOrKill(2000)
    if (syserr) { assert syserr.toString().isEmpty() }
    def lines = sysout.toString().split("\n")

    lines.each { line ->
        def trimLine = line.trim()
        def field

        field = extractOneIfMatching(trimLine, /commit (.*)/)
        if (field) { infoMap['commit'] = field }

        field = extractOneIfMatching(trimLine, /Author: (.*)/)
        if (field) { infoMap['author'] = field }

        field = extractOneIfMatching(trimLine, /Date: (.*)/)
        if (field) { infoMap['date'] = field }
    }

    def resultJSON = new groovy.json.JsonBuilder(infoMap)
    return resultJSON.toString()
}

// do during config phase:
ant.mkdir(dir: "${projectDir}/src/main/java/net/codetojoy/web")
def newBuildInfoFile = new File("${projectDir}/src/main/java/net/codetojoy/web/BuildInfo.java")
def templateBuildInfoFile = new File("${projectDir}/resources/TemplateBuildInfo.java")
def gitCommitInfo = getGitCommitInfo()

newBuildInfoFile.withWriter { def writer ->
    templateBuildInfoFile.eachLine { def line ->
        def newLine = line.replace("__PACKAGE", "net.codetojoy.web")
                          .replace("__ARTIFACT", thisArtifactId)
                          .replace("__VERSION", project.version)
                          .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                          .replace("__GIT_COMMIT_INFO", gitCommitInfo.replaceAll(/"/, /'/))
        writer.write(newLine + "\n");
    }
}

task testGitCommitInfo() {
    doLast {
        println "TRACER gitCommitInfo: " + getGitCommitInfo()
    }
}

// ---------------------------------------------
// Git & Artifactory 

import org.apache.http.client.methods.*
import org.apache.http.impl.client.*
import org.apache.http.entity.*

def getBuildInfo = { def METADATA_URL ->
    def buildInfo = ""

    def metadataRequest = new HttpGet(METADATA_URL)
    def client = HttpClientBuilder.create().build()
    def response = client.execute(metadataRequest)

    def bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))
    def metadataText = bufferedReader.getText()
    def buildInfoRegex = /.*<value>(.*)<\/value>.*/

    metadataText.eachLine { line ->
        def matcher = (line =~ buildInfoRegex)

        if (matcher.matches()) {
            buildInfo = matcher[0][1]
        }
    }

    return buildInfo
}

def getLatestURL = { ->
    def REPO_URL = "${project.ext.REPOSITORY_URL}/net/codetojoy/easytoo_may"
    def METADATA_URL = "${REPO_URL}/${project.version}/maven-metadata.xml"
    def ARTIFACT_URL_FORMAT = "${REPO_URL}/${project.version}/easytoo_may-%s.war"
    def buildInfo = getBuildInfo(METADATA_URL)

    def result = String.format(ARTIFACT_URL_FORMAT, buildInfo)
    return result
}

// TODO: this should be done via an Exec task, but do it imperatively for now
def callBashScript = { command ->
    def sysout = new StringBuilder()
    def syserr = new StringBuilder()
    def process = command.execute()
    process.consumeProcessOutput(sysout, syserr)
    process.waitForOrKill(7000)
    if (process.exitValue() != 0) { 
        println "ERROR: cmd: ${command} error: ${syserr}"
    }
    assert 0 == process.exitValue()
}

task createTag() {
    doLast {
        def formatter = new java.text.SimpleDateFormat("yyyy-MMM-dd-HHmm")
        def timestamp = formatter.format(new Date()) 
        def tag = "easywar-${project.version}-${timestamp}"
        def artifactoryURL = getLatestURL()

        // write to mapping file

        def mappingFile = new File("${projectDir}/devops/tag.artifact.mapping.csv")
        assert mappingFile.exists()
        mappingFile.append("\n" + /"${timestamp}","${tag}","${artifactoryURL}"/)

        /*
        mappingFile.withWriterAppend { file -> 
            file.write(/\n"${timestamp}","${tag}","${artifactoryURL}"/)
        }
        */

        // commit mapping file with presumptive tag

        callBashScript "${projectDir}/devops/git.commit.tag.artifact.mapping.csv.sh ${projectDir}" 

        // perform tagging

        callBashScript "${projectDir}/devops/create.tag.sh ${tag}"
    }
}

// ---------------------------------------------
// Deploying

task mockDeploy() {
    doLast {
        println "TRACER MOCK DEPLOY"
        println "TRACER MY_GIT_TAG : " + project.MY_GIT_TAG
    }
}

// ---------------------------------------------
// Publishing

publishing {
    publications {
        codetojoyEasyWeb(MavenPublication) {
            from components.web
            artifactId thisArtifactId

            pom.withXml {
                def root = asNode()
                def props = root.appendNode('properties')
                props.appendNode('foo-buildTimeStamp', buildTimeStamp)
                props.appendNode('foo-gitCommitInfo', gitCommitInfo)
                props.appendNode('foo-gitTagInfo', 'tag-one')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url REPOSITORY_URL

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

