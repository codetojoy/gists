
apply plugin: 'war'
apply plugin: 'maven-publish'

apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/info.gradle"
apply from: "${rootDir}/gradle/git.tag.gradle"

repositories {
    mavenLocal() 

    maven {
        name "remoteArtifactory"
        url REPOSITORY_URL

        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }

    jcenter()
}

dependencies {}

war {
    baseName = 'easytoo_may'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

// ---------------------------------------------
// war file

group 'net.codetojoy'
def thisArtifactId = "easytoo_may"

// do during config phase:
ant.mkdir(dir: "${projectDir}/src/main/java/net/codetojoy/web")
def newBuildInfoFile = new File("${projectDir}/src/main/java/net/codetojoy/web/BuildInfo.java")
def templateBuildInfoFile = new File("${projectDir}/resources/TemplateBuildInfo.java")

// see ~/gradle/git.tag.gradle
def gitCommitInfo = project.ext.getGitCommitInfo()

newBuildInfoFile.withWriter { def writer ->
    templateBuildInfoFile.eachLine { def line ->
        def newLine = line.replace("__PACKAGE", "net.codetojoy.web")
                          .replace("__ARTIFACT", thisArtifactId)
                          .replace("__VERSION", project.version)
                          .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                          .replace("__GIT_COMMIT_INFO", gitCommitInfo.replaceAll(/"/, /'/))
        writer.write(newLine + "\n");
    }
}

task testGitCommitInfo() {
    doLast {
        println "TRACER gitCommitInfo: " + getGitCommitInfo()
    }
}

// ---------------------------------------------
// Git & Artifactory 

task createTag() {
    doLast {
        def formatter = new java.text.SimpleDateFormat("yyyy-MMM-dd-HHmm")
        def timestamp = formatter.format(new Date()) 
        def tag = "easywar-${project.version}-${timestamp}"

        project.ext.ALL_ENVS = { env ->
            // TODO: per ENV 
            def artifactoryURL = project.ext.getLatestURL()

            // write to mapping file

            def mapFile = getTagArtifactMapForEnv(env)
            mapFile.append(/"${timestamp}","${tag}","${artifactoryURL}"/ + "\n")

            // commit mapping file with presumptive tag

            project.ext.callBashScript "${projectDir}/devops/git.commit.tag.artifact.maps.sh ${projectDir}" 
            // perform tagging

            project.ext.callBashScript "${projectDir}/devops/create.tag.sh ${tag}"
        }
    }
}

// ---------------------------------------------
// Deploying

task mockDeploy() {
    doLast {
        println "TRACER MOCK DEPLOY"
        println "TRACER MY_GIT_TAG : " + project.MY_GIT_TAG
        println "TRACER TARGET_ENV : " + project.ext.targetEnv
        def targetTag = project.MY_GIT_TAG

        def artifactoryURL = project.ext.getArtifactoryURLForTag(targetTag, project.ext.targetEnv) 

        /*
        // read mapping file to get Artifactory URL 
        def artifactoryURL = null

        def INDEX_DATE = 0
        def INDEX_TAG = 1
        def INDEX_ARTIFACTORY_URL = 2

        def mapFile = getTagArtifactMapForEnv(project.ext.targetEnv)
        def text = mapFile.getText()
        def data = CsvParser.parseCsv(text)
        data.each { def line ->
            def thisTag = line.getAt(INDEX_TAG)

            if (thisTag == targetTag) {
                artifactoryURL = line.getAt(INDEX_ARTIFACTORY_URL)
            }
        }
        */

        println "TRACER tag: ${targetTag}"
        println "TRACER url: ${artifactoryURL}"
    }
}

// ---------------------------------------------
// Publishing

publishing {
    publications {
        codetojoyEasyWeb(MavenPublication) {
            from components.web
            artifactId thisArtifactId

            pom.withXml {
                def root = asNode()
                def props = root.appendNode('properties')
                props.appendNode('foo-buildTimeStamp', buildTimeStamp)
                props.appendNode('foo-gitCommitInfo', gitCommitInfo)
                props.appendNode('foo-gitTagInfo', 'tag-one')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url REPOSITORY_URL

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

