
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.apache.httpcomponents:httpclient:4.5.5'
    }
}

import org.apache.http.client.methods.*
import org.apache.http.impl.client.*
import org.apache.http.entity.*

import groovy.util.XmlSlurper
import groovy.json.JsonSlurper

// ---------------------

def ARTIFACTORY_SERVER = "http://localhost:8081/artifactory"

def DEV = "DEV"
def QA = "QA"
def UAT = "UAT"
def ALL_ENVS = [DEV, QA, UAT]

// ---------------------

ALL_ENVS.each { env ->
    // assert new File("${projectDir}/devops/${env}.tag.artifact.map.csv").exists()
}

def getTagArtifactMapForEnv = { env ->
    def mapFile = new File("${projectDir}/devops/${env}.tag.artifact.map.csv")
    assert mapFile.exists()
    return mapFile
}

def extractOneIfMatching = { s, regex ->
    def result = null
    def matcher = (s =~ regex)
    if (matcher.matches()) {
        result = matcher[0][1]
    }
    return result
}

assert extractOneIfMatching("abc_5150_ijk", /.*_\d+_.*/)
assert ! extractOneIfMatching("abc_ijk", /.*_\d+_.*/)

def getGitCommitInfo = { ->
    def infoMap = [:]

    def sysout = new StringBuilder()
    def syserr = new StringBuilder()
    def command = "git log -n 1"
    def process = command.execute()
    process.consumeProcessOutput(sysout, syserr)
    process.waitForOrKill(2000)
    if (syserr) { assert syserr.toString().isEmpty() }
    def lines = sysout.toString().split("\n")

    lines.each { line ->
        def trimLine = line.trim()
        def field

        field = extractOneIfMatching(trimLine, /commit (.*)/)
        if (field) { infoMap['commit'] = field }

        field = extractOneIfMatching(trimLine, /Author: (.*)/)
        if (field) { infoMap['author'] = field }

        field = extractOneIfMatching(trimLine, /Date: (.*)/)
        if (field) { infoMap['date'] = field }
    }

    def resultJSON = new groovy.json.JsonBuilder(infoMap)
    return resultJSON.toString()
}

// ---------------------------------------------
// Git & Artifactory 

def httpGet = { def url ->
    def request = new HttpGet(url)
    def client = HttpClientBuilder.create().build()
    def response = client.execute(request)

    def bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))
    def result = bufferedReader.getText()
    return result
}

// TODO: this should be done via an Exec task, but do it imperatively for now
def callBashScript = { command ->
    def sysout = new StringBuilder()
    def syserr = new StringBuilder()
    def process = command.execute()
    process.consumeProcessOutput(sysout, syserr)
    process.waitForOrKill(7000)
    if (process.exitValue() != 0) { 
        println "ERROR: cmd: ${command} error: ${syserr}"
    }
    assert 0 == process.exitValue()
    return sysout.toString()
}

def getArtifactoryURLFromTag_V2  = { def targetTag, def targetEnv ->
    def viewResult = callBashScript "${projectDir}/devops/view.tag.sh ${targetTag}"
    def tagInfo = viewResult.replaceAll(targetTag, "")
    def tagInfoJson = new JsonSlurper().parseText(tagInfo)
    def artifactoryURL = tagInfoJson["${targetEnv}.artifact.url"]
    assert artifactoryURL 

    return artifactoryURL
}

def generateMnemonics = {
    def result = callBashScript "${projectDir}/devops/generate.mnemonics.sh ${projectDir}"
    return result.replaceAll(/_/, /-/).trim()
}

def getBuildInfoForArtifact = { def artifactURL ->
    def buildInfo = null

    def pomURL = artifactURL.replaceAll("war", "pom")
    def pomXML = httpGet(pomURL)
    def xml = new XmlSlurper().parseText(pomXML)
    def jsonStr = xml.properties."foo-gitCommitInfo".text()

    if (jsonStr ==~ /\{"commit":.*/) {
        buildInfo = new JsonSlurper().parseText(jsonStr)
    }

    return buildInfo
}

def findArtifactForCommitHash = { targetCommitHash ->
    def results = []

    def queryResult = callBashScript "${projectDir}/devops/query.sh ${projectDir}/devops/q1.aql"
    def queryJson = new JsonSlurper().parseText(queryResult)
    queryJson["results"].each { result ->
        def repo = result["repo"]
        def path = result["path"]
        def name = result["name"]
        def artifactURL = "${ARTIFACTORY_SERVER}/${repo}/${path}/${name}"
        def buildInfo = getBuildInfoForArtifact(artifactURL)
        if (buildInfo) {
            def thisCommitHash = buildInfo["commit"]
            if (thisCommitHash ==~ "${targetCommitHash}.*") {
                results << artifactURL
            }
        }
    }

    return results
}

def getArtifactoryURLByGitHash = { def env, def hash ->
    def results = findArtifactForCommitHash(hash)
    // def url = results.find { it == ".*${env}.*" }
    def url = results[0]
    return url
}

// --------------------------
// exports

project.ext.callBashScript = callBashScript
project.ext.getGitCommitInfo = getGitCommitInfo

project.ext.getTagArtifactMapForEnv = getTagArtifactMapForEnv 
project.ext.ALL_ENVS = ALL_ENVS

project.ext.generateMnemonics = generateMnemonics
project.ext.getBuildInfoForArtifact = getBuildInfoForArtifact
project.ext.getArtifactoryURLFromTag_V2 = getArtifactoryURLFromTag_V2

project.ext.getArtifactoryURLByGitHash = getArtifactoryURLByGitHash
